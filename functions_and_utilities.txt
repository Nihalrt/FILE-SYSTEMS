
xxd: inspect binary files

example: view the superblock of disk01X.img

xxd -s 0 -l 512 -c 32 disk01X.img



Open a file:
------------

FILE * fp = fopen("disk01X.img", "rb");   // note the b is optional
                                          // fp == NULL if it failed

Read a struct from a file:
--------------------------

int number_of_structs_actually_read = 
    fread(&the_struct, sizeof(the_struct), 1, fp);   // the "1" means read 1 struct.

// NOTE: moves the cursor forward!
// Remember - multi-byte integer values will be read in big-endian order!


Move the cursor within the file:
--------------------------------

int it_worked =
    fseek(fp, some_offset, where_the_offset_is_from);      // offset is in bytes
                                                           // where_the_offset_is_from can be:
                                                           // SEEK_SET (the beginning of the file)
                                                           // SEEK_CUR (the current cursor position)
                                                           // SEEK_END (the end of the file)

Write to a file:
---------------
int number_of_structs_written =
    fwrite(pointer_to_start,              // start of struct, or position in array of structs
           how_many_structs_to_write,      
           bytes_in_each_struct,         // sizeof(the struct)
           fp);

Close the file:
---------------

fclose(fp);

Get the little-endian version of a short (2 bytes): short x = ntohs(y);   // assumes y is big-endian
Get the little-endian version of an int (4 bytes): int x = ntohl(y);      // assumes y is big-endian
Get the big-endian version of a short (2 bytes): short x = htons(y);      // assumes y is little-endian
Get the big-endian version of an int (4 bytes): short x = htonl(y);       // assumes y is little-endian
